##################
# Other Settings #
########################################################
# Put any extra development environment settings here. #
########################################################
#CONFIG_SETTING =

####################
# Android Settings #
####################
ANDROID_JAVA_HOME = /Applications/Android\ Studio.app/Contents/jbr/Contents/Home
ANDROID_SDK_ROOT = $(HOME)/Library/Android/sdk
ANDROID_NDK_ROOT = $(ANDROID_SDK_ROOT)/ndk/25.2.9519653
ANDROID_TOOLCHAIN_ROOT = $(ANDROID_NDK_ROOT)/toolchains/llvm/prebuilt/darwin-x86_64
ifndef ANDROID_ARCHITECTURE
  ANDROID_ARCHITECTURE = armeabi-v7a
endif
ANDROID_LIBRARY_ROOT = $(HOME)/code/libraries/android/$(ANDROID_ARCHITECTURE)
ANDROID_CC = $(ANDROID_TOOLCHAIN_ROOT)/bin/clang
ANDROID_CXX = $(ANDROID_TOOLCHAIN_ROOT)/bin/clang++
ifndef ANDROID_COMPILER_TARGET
  ANDROID_COMPILER_TARGET = armv7-none-linux-androideabi19
endif
ANDROID_SYSROOT = $(ANDROID_TOOLCHAIN_ROOT)/sysroot
ANDROID_VERSION_TARGET = android-26
#ANDROID_SIGNING_SETTINGS =
#ANDROID_SIGNING_KEY =

#####################
# Mac OS X Settings #
###############################################################################
# Use 'xcode-select -s /Library/Developer/CommandLineTools' or                #
# 'xcode-select -s /Applications/Xcode.app' to select toolchain. This allows  #
# us to just use 'gcc' and 'g++' like we would on other Unix systems to build #
# things. 'MacOSX10.13.sdk' is the last SDK we can use to target i386.        #
#                                                                             #
# 'mac_sign_bundle' requires you to have set MACOS_CONFIG_CERT_NAME if you    #
# installed more than one certificate into your keychain. Additionally, your  #
# certificate must be trusted or the signing process will fail. If you got    #
# your certificate by following the steps on the Apple Developer portal and   #
# the certificate is showing as not trusted, this is most likely due to       #
# missing certificates in the chain of trust. You might need to install extra #
# intermediate certificates from Apple's Worldwide Developer Relations. See:  #
# https://www.apple.com/certificateauthority for a list of available certs.   #
# Certificates should be installed into the System keychain.                  #
###############################################################################
ifndef MACOS_TOOLCHAIN_ROOT
  MACOS_TOOLCHAIN_ROOT = /Library/Developer/CommandLineTools/SDKs
endif
ifndef MACOS_SDK
  MACOS_SDK = MacOSX.sdk
endif
MACOS_SYS_ROOT = -isysroot $(MACOS_TOOLCHAIN_ROOT)/$(MACOS_SDK)
#MACOS_MIN_VERSION = -mmacos-version-min=10.6
MACOS_CC = gcc
MACOS_CXX = g++
ifndef MACOS_CXX_STDLIB
  MACOS_CXX_STDLIB = c++
endif
#MACOS_CONFIG_CFLAGS =
#MACOS_CONFIG_CXXFLAGS =
#MACOS_CONFIG_LFLAGS =
MACOS_CONFIG_PKG_CONFIG_OPTIONS = --libs --static
MACOS_CONFIG_ALLEGRO_SUFFIX = -static
MACOS_CONFIG_DEPEND_LIBS = -lsharpyuv
#MACOS_CONFIG_CERT_NAME =
#MACOS_CONFIG_APPLE_ID =
#MACOS_CONFIG_APPLE_ID_PASSWORD =
#MACOS_CONFIG_APPLE_TEAM_ID =
MACOS_CONFIG_XCODE_PATH = /Applications/Xcode.app

###################
# iPhone Settings #
###################
IPHONE_CC = gcc
IPHONE_CXX = g++
ifndef IPHONE_CXX_STDLIB
  IPHONE_CXX_STDLIB = c++
endif
#IPHONE_CONFIG_CFLAGS =
#IPHONE_CONFIG_CXXFLAGS =
MACOS_CONFIG_PKG_CONFIG_OPTIONS = --libs --static
MACOS_CONFIG_ALLEGRO_SUFFIX = -static
IPHONE_CONFIG_DEPEND_LIBS = -lz -lpng -lvorbisidec -ldumb -lfreetype

####################
# Windows Settings #
####################
INNO_SETUP_COMPILER = ~/.wine/drive_c/Program\ Files/Inno\ Setup\ 5/Compil32.exe
#DLLS_DIR =

#################
# MSYS Settings #
#################
MSYS_CONFIG_CC = gcc
MSYS_CONFIG_CXX = g++
#MSYS_CONFIG_CFLAGS =
#MSYS_CONFIG_CXXFLAGS =
MSYS_CONFIG_LFLAGS = -mwindows
MSYS_CONFIG_PKG_CONFIG_OPTIONS = --libs --static
MSYS_CONFIG_ALLEGRO_SUFFIX = -static
MSYS_CONFIG_DEPEND_LIBS = -luuid -lkernel32 -lwinmm -lpsapi\
              -lopengl32 -lglu32 -luser32 -lcomdlg32 -lgdi32 -lshell32 -lole32\
              -ladvapi32 -lws2_32 -lshlwapi -lvorbisfile -lvorbis -lFLAC -logg\
              -ldumb -lopusfile -lopus -lfreetype -lpng -lz -ljpeg -lwebp -ld3d9 -ldsound -lstdc++ -lssp -lsharpyuv

##################
# Linux Settings #
##################

# settings for static linking (use for distribution to others)
#LINUX_CONFIG_CFLAGS = -DT3F_PNG
#LINUX_CONFIG_CXXFLAGS =
#LINUX_CONFIG_LFLAGS =
#LINUX_CONFIG_PKG_CONFIG_OPTIONS = --libs --static
#LINUX_CONFIG_ALLEGRO_SUFFIX = -static

# settings for dynamic linking (use for local build for personal use)
LINUX_CONFIG_CFLAGS =
LINUX_CONFIG_CXXFLAGS =
LINUX_CONFIG_LFLAGS =
LINUX_CONFIG_PKG_CONFIG_OPTIONS = --libs
LINUX_CONFIG_ALLEGRO_SUFFIX =

# other settings
#LINUX_CONFIG_PKG_CONFIG_OPTIONS = --with-path=/usr/local/lib/pkgconfig --libs
LINUX_CONFIG_DEPEND_LIBS = -lm -lstdc++ -lsharpyuv -lpng -lz
LINUX_CONFIG_GTK_LIBS = `pkg-config gtk+-x11-3.0 --libs`
LINUX_CONFIG_INSTALL_PREFIX = /usr/local

#############################
# Debian Packaging Settings #
#############################
DEBIAN_CONFIG_DEPENDS = liballegro-acodec5.2,\ liballegro-audio5.2,\ liballegro-image5.2,\ liballegro-physfs5.2,\ liballegro-ttf5.2,\ liballegro-dialog5.2,\ liballegro5.2,\ libc6
