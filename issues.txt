OMO Issues
----------

v0.4
----

[X]Streamline library loading.

   [X]We should be able to use the database without waiting for lists to
      generate.

   [X]List generation should be done in a separate thread so we can still
      interact with the UI.

[X]Need to NULLify tags that are cleared so we don't get blank entries in the
   library UI.

[X]Implement tags submission and retrieval.

   [X]Add script to generate tagger key.

   [X]Add dialog for creating a tagger key.

      [X]Dialog will ask for a display name.

   [X]Require existing key to submit tags.

      [X]Add a tagger database so we can check for the existence of the tagger
         before accepting tags.

   [X]Add functions for submitting and retrieving tags to the UI.

      [X]Tag submission should be able to automatically run through your entire
         library and submit only tags that aren't included in a track's
         metadata. We also need to mark submitted tags so we don't end up
         constantly resubmitting tags that are already in the database.

      [X]When retrieving tags, we need a way to prevent overwriting the user's
         own tags if they differ from the ones being downloaded. We should
         probably present a dialog which asks if the user wants to accept the
         tags in this case.

      [X]When submitting tags, we should check the library database to
         determine if a track has any tags set by the user. When editing tags
         with the Edit Tags dialog, we should set a flag in the database to
         mark that the user has input some of their own tags.

         [X]We might be able to use the Submitted flag for this. Instead of
            deleting the Submitted key from the database, we can set it to
            false when the user makes an edit. The cloud code can then check to
            see that the Submitted key exists and that it is set to false
            before actually submitting the tag. If the tag submission succeeds,
            the Submitted key can be set to true.

[X]Need a way to clear tags in the database. A tagger should be able to delete
   tags they have submitted. Tags that have been cleared should be able to be
   set to NULL in the database.

   [X]If all tags are NULL, we should delete the track's database entry.

      [X]We can probably just count the fields as we are building the query. If
         the count is not greater than the number of mandatory fields, we know
         the entry can be deleted.

[X]Fix split tracks not appearing in library.

[X]Submit split track data if it exists.

   [X]When submitting tags, we should be able to reference the base file of
      split tracks and submit tags for the base track. The library won't
      contain an entry for the base track once it has been split.

[X]Look into why RSNs are being rescanned during library scan instead of using
   the data cached in file_database.

[X]Add a function to detect a top level folder modified time. This function
   should scan all subfolders and use the newest time.

[X]If a song ends before it reaches its reported length, set an internal length
   tag. This length tag should also be submitted.

[X]Add library mutex and lock it when we are performing certain operations on
   the library database. Specifically, we need to ensure no data is written to
   the database while a separate thread is attempting to read from it. The
   library list code running in a separate thread might be reading data from
   the database while the database is being altered. This could cause a crash.

[ ]Check places where we use the cloud functions in our main thread to ensure
   the cloud thread is stopped before using them. We don't want to be operating
   on our library database from multiple threads simultaneously.

[ ]Add a way to mark the library as dirty and reload it when whatever process
   is operating on it completes.

[ ]Add library profiles. A library profile will contain library settings
   specific to that profile. For instance, you can have the default profile
   contain all of your music and have a separate profile for just MODs or
   game music.

[ ]Add file type ignore list configuration option. The codec handler registry
   should take this list into account when looking for a codec handler and
   should return NULL if we are looking for a codec handler for a type that is
   on the ignore list.

[ ]Implement portable mode. In portable mode, the library databases and app
   settings are stored alongside the executable. The idea is to allow a user to
   copy their music collection to a thumb drive and use it on multiple machines
   without having to generate library databases for each machine.

[ ]Look into adding a lyrics window.


v0.3
----

[X]Factor out library setup routines.

[X]Factor out queue helper routines.

[X]Save queue data on exit and reload on open so users can continue where they
   left off.

[X]Implement library caching system.

   [X]Cache the artist, album, and song lists.

   [X]Force rescan if we modify the library folder settings.

[X]Stop timer when performing actions that can take a long time.

[X]Fix mixed tabs/spaces.

[X]Implement font size override. The user should be able to specify a preferred
   font size to override a theme's font size. This override should cause the
   theme system to load the font in the correct size so we get a properly sized
   font throughout the GUI system.

[X]Implement track looping.

   [X]Add codec handler function for setting up the loop for a loaded track.
      The codec handler will be responsible for keeping track of this data and
      ensuring playback respects the passed loop settings.

   [X]Add loop handling to MP3A5. So we can implement track looping in the
      MP3A5 codec handler.

   [X]Add loop handling to all codec handlers that can support it.

[X]Implement seek() for DUMBA5 codec handler.

   I think we can get this working by calling duh_end_sigrenderer() and
   generate a new sigrenderer for the player with duh_start_sigrenderer(),
   passing in the desired seek time. We should add the requisite functionality
   to DUMBA5. This will require utilizing mutex locking to prevent accessing
   the sigrenderer while it is in the process of being swapped out.

   We should fix dumba5_set_player_pattern(), too. It looks like the function
   is using pointers incorrectly. Since this and the new
   dumba5_set_player_position() are functionally similar, we can probably use
   most of the same code for both functions.

[X]Implement track split dialog and tag system. We need a way to store track
   split data in the base file's metedata so we can keep it in the online
   database instead of requiring each user to split tracks on their own.

[X]Update artists/albums/songs lists after editing tags.

   [X]Delete our library caches, since they are no longer valid.

[X]Add status bar to library view. We should show library-related messages in
   this status bar instead of using the list box.

[X]Implement get_length() and get_position() for all codec handlers that can
   support it. These functions should take looping into account. If the
   playback is looped, we should count the total playback length. This includes
   the total time of the looped audio and the specified fade time.

[X]Finish main UI.

   [X]Modularize UI setup.

      [X]Use separate function for adding each module to the total UI. Each
         section of the UI should be a separate module. The player module will
         consist of the player controls, the seek control, the volume control,
         and the two info lines. The library artist, album, and song lists
         should each be their own modules as well as the status bar.

         We need to do this to make the UI setup code simpler and easier to
         maintain. With each module being created individually, we can
         calculate a total UI space for the user's device and add the modules
         that the user wants or the ones that will fit on the screen.

         Each function should be given a space to occupy on the total UI and
         the setup code for that module will smartly fill the available space
         with the required UI elements.

   [X]Add volume and seek controls to the player module.

   [X]Add song info to the player module. The plan is to have 2 lines for this,
      one line for the artist, title, etc. of the currently playing song and
      another for track-specific info from the codec handler.

[X]Finish implementing midiOut.

   [X]Add get_length();

   [X]Add get_position();

   [X]Add seek();

   [X]Add set_volume();

   [X]Add get_info();

[X]Fix slider GUI element.

   [X]Vertical slider renders incorrectly.

[X]Fix shuffle not starting playback.

[X]Add CJK font support to T3GUI.

   [X]Add cjk_font theme state parameter. If a CJK font is specified, use
      al_set_fallback_font() to map this font as the fallback font.

[X]Add a CJK font to the basic theme.

[X]Look into using a monospace font for the song info display. Some of the
   codec handlers have potential to do neat animations based on playback info
   if we can gaurantee the font spacing. We need to supply a CJK monospace font
   as well if we implement this.


v0.2
----

[X]Fix queue list display swapping album and title.

[X]Fix queue list not scrolling to keep up with the currently playing queue
   item. If the current item is on screen when it finishes playing,
   automatically scroll the list to put the new current item at the top if the
   current item is now past the bottom of the visible part of the list.

[X]Don't require user to select a library folder if they press L and haven't
   set a library folder yet.

[X]Show text indicating no library has been set up in library view when
   appropriate.

[X]Ensure we are spawning the library scanning thread in all places the library
   setup routing is being called.

[X]Keep queue list tags updated.

   [X]When editing tags, the new tags need to be displayed upon okaying them.

   [X]Tags need to be updated with the info from the library if the library
      gets finished loading.

[X]Specify where archive handlers extract files to. We need the library scanner
   to extract to a different location than the player so we don't get conflicts
   that cause playback or scanning errors.

[X]Get tags for queued files using codec handler if library has not been loaded
   yet.

[X]Add more detailed scanning info to the library view. Show which file is
   currently being scanned and total progress.

[X]Add 'Shuffle All' item to song list.

[X]Allow Shift+Double-Click to add items to the queue instead of replacing it.

[X]Implement window constraints. Use theme data to calculate a good minimum
   window size.

[X]Figure out why window position settings aren't restored properly when
   switching back to player-only view.

[X]Update menus to include items for all current functionality.

[X]See if we can add some stuff to info.plist to make associating music files
   with OMO work correctly.

[X]Update version numbers.

[X]Update changelog.

[X]Improve default theme button graphics.

[X]Don't use t3f_get_filename() in multi-threaded situations.

[X]Don't restore window positions on Windows since we can't guarantee the
   window position will be correct.
